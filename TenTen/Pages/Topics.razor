@page "/topics"
@inject ITopicService TopicService
@inject ITenTenService TenTenService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>10&10 - TenTen</PageTitle>

<div class="topics-container">
    <div class="navigation-breadcrumb">
        <a href="/" class="breadcrumb-link">
            <span class="bi bi-house"></span> Ìôà
        </a>
        <span class="breadcrumb-separator">></span>
        <span class="breadcrumb-current">10&10 Í¥ÄÎ¶¨</span>
    </div>
    
    <div class="topics-header">
        <h1>üíï 10&10</h1>
        <p>10Î∂ÑÍ∞Ñ ÎßàÏùåÏùÑ Ï†ÅÍ≥† 10Î∂ÑÍ∞Ñ ÎåÄÌôîÎ•º ÎÇòÎàÑÏÑ∏Ïöî</p>
               <div class="header-actions">
                   <div class="month-selector">
                       <input type="month" id="monthSelect" @bind="selectedMonth" @bind:after="LoadTopicsForMonth" 
                              class="form-control month-picker" />
                   </div>
                   <button class="btn btn-primary" @onclick="ShowCreateModal">
                       <span class="bi bi-plus-circle"></span> ÏÉà Ï£ºÏ†ú Ï∂îÍ∞Ä
                   </button>
               </div>
           </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (topics.Any())
    {
        <div class="topics-list">
                   @foreach (var topic in topics)
                   {
                       <div class="topic-list-item" @onclick="() => NavigateToTenTen(topic.Id)">
                           <div class="topic-info">
                               <div class="topic-date">
                                   <span class="date-badge">@topic.TopicDate.ToString("yyyy-MM-dd")</span>
                                   <span class="day-name">@topic.TopicDate.ToString("dddd")</span>
                               </div>
                               <div class="topic-subject">
                                   <h4>@topic.Subject</h4>
                                   <small class="text-muted">ÏÉùÏÑ±Ïùº: @topic.CreatedAt.ToString("yyyy-MM-dd HH:mm")</small>
                               </div>
                                <div class="topic-status">
                                    @{
                                        var hasTenTen = topicStatuses.ContainsKey(topic.Id) ? topicStatuses[topic.Id] : false;
                                    }
                                    @if (hasTenTen)
                                    {
                                        <span class="status-badge status-written">
                                            <span class="bi bi-check-circle"></span> ÏûëÏÑ±ÏôÑÎ£å
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="status-badge status-empty">
                                            <span class="bi bi-circle"></span> ÎØ∏ÏûëÏÑ±
                                        </span>
                                    }
                                </div>
                           </div>
                           <div class="topic-actions">
                               <button class="btn btn-sm btn-outline-primary" @onclick:stopPropagation="true" @onclick="() => EditTopic(topic)" title="ÏàòÏ†ï">
                                   <span class="bi bi-pencil"></span>
                               </button>
                               <button class="btn btn-sm btn-danger" @onclick:stopPropagation="true" @onclick="() => DeleteTopic(topic.Id)" title="ÏÇ≠Ï†ú">
                                   <span class="bi bi-trash"></span>
                               </button>
                               <button class="btn btn-sm btn-success" @onclick:stopPropagation="true" @onclick="() => NavigateToTenTen(topic.Id)" title="10&10 ÏûëÏÑ±">
                                   <span class="bi bi-pencil-square"></span> 10&10
                               </button>
                           </div>
                       </div>
                   }
        </div>
    }
           else
           {
               <div class="empty-state">
                   <div class="empty-icon">üìù</div>
                   <h3>@selectedMonth.ToString("yyyyÎÖÑ MMÏõî")Ïùò Ï£ºÏ†úÍ∞Ä ÏóÜÏäµÎãàÎã§</h3>
                   <p>Ïù¥Î≤à Îã¨Ïùò Ï≤´ Î≤àÏß∏ Ï£ºÏ†úÎ•º Ï∂îÍ∞ÄÌï¥Î≥¥ÏÑ∏Ïöî!</p>
                   <button class="btn btn-primary" @onclick="ShowCreateModal">
                       <span class="bi bi-plus-circle"></span> Ï£ºÏ†ú Ï∂îÍ∞ÄÌïòÍ∏∞
                   </button>
               </div>
           }
</div>

<!-- Create/Edit Modal -->
@if (showModal)
{
    <div class="modal-backdrop" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h5>@(isEditing ? "Ï£ºÏ†ú ÏàòÏ†ï" : "ÏÉà Ï£ºÏ†ú Ï∂îÍ∞Ä")</h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="currentTopic" OnValidSubmit="SaveTopic">
                    <DataAnnotationsValidator />
                    
                    <div class="form-group">
                        <label for="subject">Ï£ºÏ†ú *</label>
                        <InputText id="subject" @bind-Value="currentTopic.Subject" 
                                  class="form-control" placeholder="Ïòà: Ïò§Îäò Í∞ÄÏû• Í∏∞Îª§Îçò ÏàúÍ∞Ñ" />
                        <ValidationMessage For="@(() => currentTopic.Subject)" class="text-danger" />
                    </div>

                    <div class="form-group">
                        <label for="topicDate">ÎÇ†Ïßú *</label>
                        <InputDate id="topicDate" @bind-Value="currentTopic.TopicDate" 
                                  class="form-control" />
                        <ValidationMessage For="@(() => currentTopic.TopicDate)" class="text-danger" />
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }

                    <div class="modal-actions">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Ï∑®ÏÜå</button>
                        <button type="submit" class="btn btn-primary" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            @(isEditing ? "ÏàòÏ†ï" : "Ï∂îÍ∞Ä")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    private List<Topic> topics = new();
    private Dictionary<int, bool> topicStatuses = new();
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditing = false;
    private bool isSaving = false;
    private string errorMessage = string.Empty;
    private CreateTopicRequest currentTopic = new();
    private DateTime selectedMonth = DateTime.Today;
    private int? editingTopicId = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadTopicsForMonth();
    }

    private async Task LoadTopicsForMonth()
    {
        isLoading = true;
        try
        {
            topics = await TopicService.GetTopicsAsync();
            // ÏÑ†ÌÉùÎêú ÏõîÏùò Ï£ºÏ†úÎßå ÌïÑÌÑ∞ÎßÅÌïòÏó¨ ÎÇ†ÏßúÏàúÏúºÎ°ú Ï†ïÎ†¨
            topics = topics
                .Where(t => t.TopicDate.Year == selectedMonth.Year && t.TopicDate.Month == selectedMonth.Month)
                .OrderByDescending(t => t.TopicDate)
                .ToList();

            // Í∞Å Ï£ºÏ†úÏùò 10&10 ÏÉÅÌÉúÎ•º ÎØ∏Î¶¨ Î°úÎìú
            topicStatuses.Clear();
            foreach (var topic in topics)
            {
                try
                {
                    var tenTens = await TenTenService.GetTenTensByTopicAsync(topic.Id);
                    topicStatuses[topic.Id] = tenTens.Any();
                }
                catch
                {
                    topicStatuses[topic.Id] = false;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ï£ºÏ†úÎ•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowCreateModal()
    {
        isEditing = false;
        editingTopicId = null;
        currentTopic = new CreateTopicRequest
        {
            TopicDate = selectedMonth
        };
        errorMessage = string.Empty;
        showModal = true;
    }

    private void EditTopic(Topic topic)
    {
        isEditing = true;
        editingTopicId = topic.Id;
        currentTopic = new CreateTopicRequest
        {
            Subject = topic.Subject,
            TopicDate = topic.TopicDate
        };
        errorMessage = string.Empty;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        isEditing = false;
        editingTopicId = null;
        currentTopic = new CreateTopicRequest();
        errorMessage = string.Empty;
    }

    private async Task SaveTopic()
    {
        isSaving = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            if (isEditing && editingTopicId.HasValue)
            {
                var updateRequest = new UpdateTopicRequest
                {
                    Subject = currentTopic.Subject,
                    TopicDate = currentTopic.TopicDate
                };
                await TopicService.UpdateTopicAsync(editingTopicId.Value, updateRequest);
            }
            else
            {
                await TopicService.CreateTopicAsync(currentTopic);
            }

            await LoadTopicsForMonth();
            CloseModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Ï£ºÏ†ú Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {ex.Message}";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }


    private async Task DeleteTopic(int topicId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Ï†ïÎßêÎ°ú Ïù¥ Ï£ºÏ†úÎ•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?"))
        {
            try
            {
                var success = await TopicService.DeleteTopicAsync(topicId);
                if (success)
                {
                    await LoadTopicsForMonth();
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Ï£ºÏ†ú ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {ex.Message}";
            }
        }
    }



    private void NavigateToTenTen(int topicId)
    {
        // 10&10 ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌïòÎ©¥ÏÑú ÏÑ†ÌÉùÎêú Ï£ºÏ†ú IDÎ•º ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞Î°ú Ï†ÑÎã¨
        NavigationManager.NavigateTo($"/tenten?topicId={topicId}");
    }
}
